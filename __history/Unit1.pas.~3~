unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait, REST.Types, REST.Client, FireDAC.Comp.Client,
  FireDAC.Comp.UI, FireDAC.Phys.MySQL, Data.Bind.Components,
  Data.Bind.ObjectScope, REST.Response.Adapter, Data.DB, FireDAC.Comp.DataSet,
  Vcl.StdCtrls, FireDAC.Phys.PG, FireDAC.Phys.PGDef,uCep;

type
  TForm1 = class(TForm)
    btnConsultar: TButton;
    btnSalvar: TButton;
    EditCep: TEdit;
    FDConnection1: TFDConnection;
    FDQuery1: TFDQuery;
    RESTResponseDataSetAdapter1: TRESTResponseDataSetAdapter;
    RESTResponse1: TRESTResponse;
    FDPhysMySQLDriverLink1: TFDPhysMySQLDriverLink;
    FDGUIxWaitCursor1: TFDGUIxWaitCursor;
    FDMemTable1: TFDMemTable;
    RESTRequest1: TRESTRequest;
    RESTClient1: TRESTClient;
    EditEndereco: TEdit;
    LabelEndereco: TLabel;
    LabelBairro: TLabel;
    EditBairro: TEdit;
    LabelCidade: TLabel;
    EditCidaded: TEdit;
    EditUF: TEdit;
    LabelComplemento: TLabel;
    EditComplemento: TEdit;
    LabelIBGE: TLabel;
    EditIBGE: TEdit;
    LabelDDD: TLabel;
    EditDDD: TEdit;
    LabelGIA: TLabel;
    EditGIA: TEdit;
    LabelSIAF: TLabel;
    EditSIAF: TEdit;
    RetornoJson: TMemo;
    procedure btnConsultarClick(Sender: TObject);

  private

    function Consultar(const ICep: string): TCep;

  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  FDQuery1: TFDQuery;
  Http : TidHTTP;
  JsonResponse : String;
  erroJson: String;
  RESTClient1: TRESTClient;
  RESTRequest1: TRESTRequest;
  RESTResponse1: TRESTResponse;
  RESTResponseDataSetAdapter1: TRESTResponseDataSetAdapter;
  JSONValue: TJSONValue;

implementation

{$R *.dfm}

function TForm1.Consultar(const ICep: string): TCep;
begin
    RESTClient1.BaseURL := 'https://viacep.com.br/ws/' + EditCep.Text + '/json/';
    RESTRequest1.Execute;
    JSONValue := TJSONObject.ParseJSONValue(RESTResponse1.Content);



    if (erroJson = 'true') then
    begin
      ShowMessage('CEP não encontrado na API do ViaCEP');
    end
    else
    begin
    try
      Result := TCep.Create;
      Result.Cep := JSONValue.GetValue<string>('cep', '');
      Result.Logradouro := JSONValue.GetValue<string>('logradouro', '');
      Result.Complemento := JSONValue.GetValue<string>('complemento', '');
      Result.Bairro := JSONValue.GetValue<string>('bairro', '');
      Result.Localidade := JSONValue.GetValue<string>('localidade', '');
      Result.Uf := JSONValue.GetValue<string>('uf', '');
      Result.Ibge := JSONValue.GetValue<string>('ibge', '');
      Result.Gia := JSONValue.GetValue<string>('gia', '');
      Result.Ddd := JSONValue.GetValue<string>('ddd', '');
      Result.Siafi := JSONValue.GetValue<string>('siafi', '');

      Result.Json := RESTResponse1.Content;

      erroJson := JSONValue.GetValue<string>('erro', '');

    finally
      JSONValue.Free;
    end;
    end;
end;


procedure TForm1.btnConsultarClick(Sender: TObject);
begin
var
  cepResult: TCep;

  RetornoJson.Clear;
  try

  cepResult := ConsultarCEP(EditCep.Text);

  edtCEP.Text := cepResult.Cep;
  edtLogradouro.Text := cepResult.Logradouro;
  edtComplemento.Text := cepResult.Complemento;
  edtBairro.Text := cepResult.Bairro;
  edtLocalidade.Text := cepResult.Localidade;
  edtUF.Text := cepResult.uf;
  edtIBGE.Text := cepResult.Ibge;
  edtGIA.Text := cepResult.Gia;
  edtDDD.Text := cepResult.Ddd;
  edtSiafi.Text := cepResult.Siafi;
  mmJson.Lines.Text := cepResult.Json;


  SalvarCEPBanco(cepResult);

  except
    on e:Exception do
      ShowMessage('Erro ao consultar CEP: ' + e.Message);
  end;

end;

end.
